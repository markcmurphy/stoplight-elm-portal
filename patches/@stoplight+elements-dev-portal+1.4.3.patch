diff --git a/node_modules/@stoplight/elements-dev-portal/index.mjs b/node_modules/@stoplight/elements-dev-portal/index.mjs
index 14d5178..61a65e6 100644
--- a/node_modules/@stoplight/elements-dev-portal/index.mjs
+++ b/node_modules/@stoplight/elements-dev-portal/index.mjs
@@ -239,32 +239,36 @@ function useGetNodeContent({ nodeSlug, projectId, branchSlug, }) {
     return useQuery(['useNodeContent', nodeSlug, projectId, branchSlug, platformUrl, platformAuthToken], () => getNodeContent({ nodeSlug, projectId, branchSlug, platformUrl, platformAuthToken }), { enabled: nodeSlug && projectId ? true : false });
 }
 
-const getTableOfContents = ({ projectId, branchSlug, platformUrl = 'https://stoplight.io', platformAuthToken, }) => __awaiter(void 0, void 0, void 0, function* () {
+const getTableOfContents = ({ projectId, branchSlug, platformUrl = 'https://stoplight.io', platformAuthToken, page}) => __awaiter(void 0, void 0, void 0, function* () {
     const branchQuery = branchSlug ? `?branch=${branchSlug}` : '';
-    const response = yield fetch(`${platformUrl}/api/v1/projects/${projectId}/table-of-contents${branchQuery}`, {
-        headers: Object.assign({ 'Stoplight-Elements-Version': appVersion }, (platformAuthToken && { Authorization: `Bearer ${platformAuthToken}` })),
-    });
+    console.log(page)
+    const response = page ? yield fetch(`/api/tagged/${page}`, {
+        // headers: Object.assign({ 'Stoplight-Elements-Version': appVersion }, (platformAuthToken && { Authorization: `Bearer ${platformAuthToken}` })),
+
+    }) : yield fetch(`${platformUrl}/api/v1/projects/${projectId}/table-of-contents`);
     const data = yield response.json();
     if (!response.ok) {
         throw new Error(data);
     }
+    console.log(data)
     return data;
 });
 
-function useGetTableOfContents({ projectId, branchSlug }) {
+function useGetTableOfContents({ projectId, branchSlug, page }) {
     const { platformUrl, platformAuthToken } = React.useContext(PlatformContext);
-    return useQuery(['tableOfContents', projectId, branchSlug, platformUrl, platformAuthToken], () => getTableOfContents({ projectId, branchSlug, platformUrl, platformAuthToken }), { enabled: projectId ? true : false });
+    return useQuery(['tableOfContents', projectId, branchSlug, page, platformUrl, platformAuthToken], () => getTableOfContents({ projectId, branchSlug, page, platformUrl, platformAuthToken }), { enabled: projectId ? true : false });
 }
 
-const StoplightProjectImpl = ({ projectId, hideTryIt, hideMocking, hideExport, collapseTableOfContents = false, tryItCredentialsPolicy, tryItCorsProxy, }) => {
+const StoplightProjectImpl = ({ projectId, hideTryIt, hideMocking, hideExport, collapseTableOfContents = false, tryItCredentialsPolicy, tryItCorsProxy, page}) => {
     const { branchSlug = '', nodeSlug = '' } = useParams();
     const history = useHistory();
-    const { data: tableOfContents, isFetched: isTocFetched } = useGetTableOfContents({ projectId, branchSlug });
+    const { data: tableOfContents, isFetched: isTocFetched } = useGetTableOfContents({ projectId, branchSlug, page });
     const { data: branches } = useGetBranches({ projectId });
     const { data: node, isLoading: isLoadingNode, isError, error: nodeError, } = useGetNodeContent({
         nodeSlug,
         projectId,
         branchSlug,
+        page
     });
     const container = React.useRef(null);
     if (!nodeSlug && isTocFetched && (tableOfContents === null || tableOfContents === void 0 ? void 0 : tableOfContents.items)) {
